
_______________________PROYECTO______________________________________________________


 Donde vamos a ubicar todos los archivos para por ej una app, o una guia en conjunto.

 1- Usamos -java application-

 2- Lo nombramos y vemos donde lo vamos a localizar en las carpetas. 

 3-Creamos una clase "class"
Es la unidad basica para Java en el lenguaje orientado a objetos.
Dentro de una clase se colocan los datos y el codigo del programa que se codifica. 

 4-Paquete -> Nueva clase -> Java Main class 
 
 Esta bueno seleccionarlo para identificar que la clase es del metodo main. 

 Osea:
 Paquete -> contiene programas (.java) -> Clase (Acá trabajamos)

 PAQUETES_______________________________________________________
 Permiten organizar los programas java, con un mismo fin.
 Con estos organizamos los conjuntos de clases.
(Mi ej, paquete guia 2 -> clases con ejercicios en cada una)
 Nos asisten para poder compartir el codigo, como por ej el import. 

_____________________________CLASE __________________________________________________

Forma escencial en la que el lenguaje usado nos permite organizar nuestro codigo. 
Aqui colocamos: datos, variables, info y el codigo que nos permita implementar nuestro objetivo. 

 " public class -nombredelaclase- { 

 public static void main (String[] args) {
 }

 } "
 Subprograma llamado -MAIN-
 Es el primero que se invoca cuando yo llamo a un programa java.
 Cuando quiero ejecutar el programa, lo primero que se ejecuta es lo que esta 
 codeado en main. 
 Los subprogramas que se codifican dentro de una clase, la metodologia los nombre MÉTODO.

______________________________________GENERALIDADES_____________________________________________________


 Los bloques de codigos se limitan con {}

 Todas las lineas de instruccion -codigo- terminan con ;

 SCANNER = Clase escrita por los proveedores de java. 
 EMULA EL LEER de PSeint.
 El IDE Netbeans no sabe que es una clase, entonces si hacemos click en 
 la bombillita de luz, apretamos "ADD IMPORT FOR JAVA.URTIL.SCANNER" y se va el error. 
 Con el import, importamos la clase Scanner del paquete java.util.
 Osea, importamos un codigo. 

 "Scanner leer = new Scanner(System.in);"


 System.out.println("Hola Mundo");
 System.out.print("Hola ");
 System.out.print("Mundo ");

Con el ln = line, cada vez que escribimos un sout.ln, hay salto de linea.
Cuando sacamos el line podemos escribir varios sout y todas las palabras que esten dentro iran una al lado de la otra. 

VARIABLES________________________________________________________

 1-Primero decimos de que tipo es. Ej Scanner, String (CADENA) 
 
 2- Decimos el nombre. 

 3- Le asignamos un objeto a la variable. 
 	"new Scanner(System.in);"
 Le decimos al programa que necesitamos la funcionalidad del scanner obteniendo el valor por teclado.

4-Definir variable. En este caso String es una cadena de caracteres.

Estructura general: 
tipo + nombre
ej 
String nombres 

SYSTEM.IN 
Identifica el ingreso que se va a hacer por teclado.
(Suele ir en el scanner) 

SYSTEM.OUT
Identifica la salida por pantalla. 

println 
Nos permite imprimir cualquier tipo de cadena. En java las cadenas estan entre ""

leer.next();
Leer como variable invoca a otra (next) y el resultado de eso se asigna a nuestra variable string. 
(nombre)

Comentarios = //
Comentarios multilineas = arrancan con /*
			termina con */

Para ejecutar el proyecto:
Java prerecopila antes de ejecutar el programa y por eso demora un ratito en ejecutar. 

-Run project = va a darnos a elegir que clase ejecutear. 

- 

METODO
 Subprograma con un nuevo nombre.
 Se codifican dentro de las clases.
 el metodo MAIN es el primero que se ejecuta en el programa.

public: es un tipo de acceso que indica que el método main() es público y, por
tanto, puede ser llamado desde otras clases. Todo método main() debe ser
público para poder ejecutarse desde el intérprete Java (JVM).

static: es un modificador el cual indica que la clase no necesita ser instanciada
para poder utilizar el método. También indica que el método es el mismo para
todas las instancias que pudieran crearse.

void: indica que la función o método main() no devuelve ningún valor.

Si una variable local no se
inicializa al momento de declararla, se debe asignar un valor antes de intentar
usarla. El acceso a una variable local no inicializada dará lugar a un error en
tiempo de compilación.

TIPOS DE VARIABLES___________________________________________

BYTE
Nro ntero pequeño.

SHORT
Nro 3 Cifras significativas despues de la coma y tambien pequeño. 
nro por defecto 0 

*INT 
Nro entero.
Varias comas. 
Opcion por defecto. 
-Es la mas optima para los números-
nro por defecto 0

LONG 
Nro entero, valores muy muy pequeños o muy muy grandes.
nro por defecto 0

FLOAT 
Numero decimal de precision simple. x32 bits

DOUBLE 
Numero decimal de precision doble. x64 bits
nro por defecto 0,0

*BOOLEAN 
Solo soporta dos variables. VERDADERO O FALSO.
El dato es representado con un solo bit de info.
por defecto se inicia en falso 

CHAR
Simple caracter unicode x16 bits. Va desde 0 a 64,535.
Se puede escribir en comillas simple, ej  'a'.
Por defecto el valor es '\u0000'

*STRING 
Cadena de caracteres. 
Encerrando la cadena con comillas doble, se crea una instancia nueva de un objeto tipo string. 
Ej String cadena = "Sebastiían"
Una vez creados, sus valores no se cambian. 
No es un dato primitivo. 
Por defecto se inicia en null
(Objetos tambien) 

Ejemplo:

public stactic void main(Strin[] args) {

String nombre;
int numero;
double decimales; 
 }

}

tipo de variable + nombre 


<tipo_de_dato> <nombre_variable> = expresion;

Al ejecutarse la asignación, primero se evalúa la expresión de la derecha y
luego se asigna el resultado a la variable de la izquierda. El tipo de la variable y
el de la expresión deben coincidir.

public static void main(String[] args) {
String nombre = "Mariano";
int numero = 10;
double decimales = 40.5;
}


______OPERADORES_____________________________________


		Aritmeticos: 

+ Suma

- Resta

* Multiplicacion

/ Division 

% Modulo 


		Unarios: 

+ De suma, indica que el valor es positivo. 

- De resta, indica que el valor es negativo.

++ Operador de incremento. 

-- Operador de decremento.


	De igualdad y relación:

== Igual 

!= Distinto 

> Mayor que

>= Mayor o igual que 

< Menor que 

<= Menor o igual que

public static void main(String[] args) {
int num1 = 5;
int num2 = 5;
int suma = num1 + num2;
double division = num1 / num2;
boolean logico = num2 < num1;
num1++;
}

_________________________________________UTILIDADES__________________________________________________________________________________________________________________

Las clases de utilidad son clases de metodos o funciones que hacen operaciones.
Facilita no escribir dicha operacion. 
Las mas comunes:
Arrays, String, Integer, Math, Date, Calendar y GregorianCalendar.

______________CLASE "STRING" _________________________________

-charAt(int index)

Devuelve el caracter especificado en una posición específica de una cadena de texto.
El parámetro "index" es un número entero que indica la posición del carácter que se desea obtener.
String texto = "Hola mundo";
char tercerCaracter = texto.charAt(2);
//obtenemos la tercera posicion de la cadena, osea la "l" 
la función "charAt(2)" devuelve el carácter en la posición 2 (los índices empiezan en 0), 
que corresponde al tercer carácter de la cadena.


-equals(String str)

Compara si dos cadenas son iguales. 
Devuelve true si son iguales y false sino.

ejemplos:

"
String texto1 = "Hola";
String texto2 = "Hola";
Podemos usar la función "equals()" para comparar las dos cadenas de texto de la siguiente manera:

boolean sonIguales = texto1.equals(texto2);
En este caso, la función "equals()" devuelve el valor booleano "true", ya que las dos cadenas de texto son iguales.
"

"
String texto1 = "Hola";
String texto2 = "hola";
boolean sonIguales = texto1.equals(texto2); // Devuelve "false"
 " 
//abajo podes poner un sout y decir "Las cadenas de texto son iguales: " y el booleano. 


-equalsIgnoreCase(String str) 

Similar a la función "equals()", pero no es sensible a las diferencias entre mayúsculas y minúsculas en las dos cadenas de texto que se comparan. 
Es decir, si hay alguna diferencia en las mayúsculas o minúsculas en las dos cadenas de texto, la función aún puede devolver el valor booleano "true" si los caracteres son los mismos.
ejemplo:
String texto1 = "Hola";
String texto2 = "hola";
boolean sonIguales = texto1.equalsIgnoreCase(texto2);

Devuelve el valor booleano "true", ya que las dos cadenas de texto son iguales aunque la segunda tenga el primer carácter en minúscula.
Devuelve false si aunque tengan la misma cantidad de caracteres, no sean los mismos.

-compareTo(String otraCadena)

Compara 2 cadenas de caracteres alfabeticamente. 
Retorna 0 = si son iguales
Retorna int negativo = si la primera es menor.
Retorna int positivo = si la primera es mayor.
ej:
String texto1 = "Hola";
String texto2 = "Mundo";
int comparacion = texto1.compareTo(texto2);

La función "compareTo()" devuelve un valor entero negativo (-13 en este ejemplo) ya que la cadena de texto "Hola" 
es menor que la cadena de texto "Mundo" alfabéticamente.
Es importante tener en cuenta que la comparación de cadenas de texto es sensible a las mayúsculas y minúsculas, 
por lo que "Mundo" sería mayor que "hola.


-concat(String str)

Concatena la cadena del parametro al FINAL de la primera cadena. 
La función devuelve una nueva cadena que es la concatenación de la cadena de texto que llama al método y la cadena de texto que se especifica como argumento.
ej:
String texto1 = "Hola";
String texto2 = "Mundo";
String resultado = texto1.concat(texto2);
En este caso, la variable "resultado" contendría la cadena de texto "HolaMundo".


-contains(CharSequence s)

Determina si una cadena de texto, contiene otra subcadena de texto como parte de su contenido. 
La función devuelve un valor booleano (true o false) dependiendo si la cadena de texto que llama al método contiene la subcadena de texto especificada como argumento.
ej:

String texto = "La programación es divertida";
boolean contiene = texto.contains("divertida");

En este caso, la variable "contiene" tendría el valor booleano "true", ya que la cadena de texto "La programación es divertida" contiene la subcadena "divertida".

También podemos usar la función "contains()" para buscar una subcadena de texto en una cadena de texto que se ingresa por el usuario en tiempo de ejecución.
(Osea todo bajo teclado):

Scanner leer = new Scanner(System.in);
//un leer 
System.out.println("Ingresa una cadena de texto:");
String texto = leer.nextLine();
//llamamos al leer para que ingresar valor por teclado, ademas de definir en la misma linea de codigo que la info que entro en leer va a almacenarse en texto.

if (texto.contains("programación")) {
    System.out.println("La cadena de texto contiene la palabra 'programación'");
} else {
    System.out.println("La cadena de texto NO contiene la palabra 'programación'");
}

//hacemos un condicional usando el contanis como condicion.


-endsWith(String suffix)

Para determinar si una cadena de texto termina con otra subcadena de texto especificada como argumento. 
La función devuelve un valor booleano (true o false) dependiendo si la cadena de texto que llama al método termina con la subcadena de texto especificada como argumento.
ej:

String texto = "La programación es divertida";
boolean termina = texto.endsWith("divertida");

En este caso, la variable "termina" tendría el valor booleano "true",ya que la cadena de texto "La programación es divertida" termina con la subcadena "divertida".

Scanner leer = new Scanner(System.in);
System.out.println("Ingresa una cadena de texto:");
String texto = leer.nextLine();

if (texto.endsWith("programación")) {
    System.out.println("La cadena de texto termina con la palabra 'programación'");
} else {
    System.out.println("La cadena de texto NO termina con la palabra 'programación'");
}



-indexOf(String str)

Para encontrar la posición de la primera ocurrencia de una subcadena de texto dentro de una cadena de texto que llama al método. 
La función devuelve un valor entero que representa la posición de la primera ocurrencia de la subcadena de texto dentro de la cadena de texto.
ej:
String texto = "La programación es divertida";
		0123
int posicion = texto.indexOf("programación");

la variable "posicion" tendría el valor entero 3, ya que la subcadena "programación" comienza en la cuarta posición (ya que la indexación comienza desde cero).
Si la subcadena de texto no se encuentra dentro de la cadena de texto, la función "indexOf()" devuelve -1.

Scanner leer = new Scanner(System.in);
System.out.println("Ingresa una cadena de texto:");
String texto = leer.nextLine();

int posicion = texto.indexOf("programación");
//buscamos la palabra programacion y decimos: 

if (posicion != -1) { 
//acá decimos que si posicion es distinto de -1 = la subcadena se encuentra en la cadena.

    System.out.println("La cadena de texto contiene la palabra 'programación' en la posición " + posicion);
} else {

    System.out.println("La cadena de texto NO contiene la palabra 'programación'");
}



-isEmpty()
Retorna verdadero si la longitud de la cadena es 0.
Nos ayuda a saber si una cadena de texto esta vacio o no. 
Si es el caso, con un booleano nos daria true.

-length()
Nos da la longitud de la cadena. 
String texto = "Hola, mundo!";
int longitud = texto.length();

En este caso, la variable "longitud" tendría el valor entero 12, ya que la cadena de texto "Hola, mundo!" contiene 12 caracteres.

Scanner sc = new Scanner(System.in);
System.out.println("Ingresa una cadena de texto:");
String texto = sc.nextLine();

int longitud = texto.length();
System.out.println("La longitud de la cadena de texto es: " + longitud);


-replace(char oldChar, char newChar)
Reemplaza todas las ocurrencias de un carácter específico (oldChar) en una cadena de texto con otro carácter (newChar).

String texto = "Hola, mundo!";
String nuevoTexto = texto.replace('o', 'e');

('Caract a reemplazar', 'Caracter que reemplaza');
En este caso, la variable "nuevoTexto" = "Hele, munde!".

String texto = "Hola,      mundo!";
String nuevoTexto = texto.replace(' ', '');

La variable "nuevoTexto" tendría el valor de "Hola,mundo!", ya que eliminamos los espacios.

-split(String regex)
Se utiliza para dividir una cadena de texto en una matriz de subcadenas utilizando una expresión regular como delimitador.
La función "split()" busca todas las ocurrencias del patrón delimitador en la cadena de texto y divide la cadena en subcadenas separadas por ese patrón.

String texto = "Hoy es un buen día para aprender a programar en Java";
String[] palabras = texto.split(" ");
//Matriz de subcadenas delimitadas por los espacios. 

String texto = "Juan,Pérez,30,Alemania";
String[] valores = texto.split(",");

En este caso, la variable "valores" sería una matriz String que contendría los valores resultantes después de la división de la cadena de texto original.

-startsWith(String prefix)
Retorna true si el comienzo de la cadena es igual al prefijo del parámetro.

String texto = "Hola, ¿cómo estás?";
boolean empiezaConHola = texto.startsWith("Hola");
//en " " el parametro a buscar. 

if(empiezaConHola) {
    System.out.println("El texto empieza con 'Hola'");
} else {
    System.out.println("El texto no empieza con 'Hola'");
}

//estamos verificando si la cadena de texto comienza con la palabra "Hola".



-substring(int beginIndex)
Retorna la sub cadena desde el carácter del parámetro.

String texto = "Java es un lenguaje de programación";
		012345
String subcadena = texto.substring(5);
//estamos extrayendo una subcadena de la cadena de texto original. 
La subcadena comienza en el índice 5 de la cadena de texto original ("e" en "es") y termina al final de la cadena de texto. 
La subcadena resultante es "es un lenguaje de programación". 

System.out.println(subcadena);
//en pantalla vemos "es un lenguaje de programación".


-substring(int beginIndex, int endIndex)

String texto = "Java es un lenguaje de programación";
		     .        .
String subcadena = texto.substring(5, 16);
System.out.println(subcadena);

Estamos extrayendo una subcadena de la cadena de texto original. 
La subcadena comienza en el índice 5 de la cadena de texto original ("e" en "es") y termina en el índice 15 ("l" en "lenguaje"). 
La subcadena resultante es "es un leng".


-toCharArray()
Retorna el conjunto de caracteres de la cadena.

String texto = "Java es un lenguaje de programación";
char[] caracteres = texto.toCharArray();
for (int i = 0; i < caracteres.length; i++) {
    System.out.print(caracteres[i] + " ");
}

Estamos convirtiendo la cadena de texto original en un arreglo de caracteres.
Luego, estamos iterando sobre los elementos del arreglo y los imprimimos en la consola. La salida en la consola será:
J a v a   e s   u n   l e n g u a j e   d e   p r o g r a m a c i ó n


-toLowerCase()
 Retonar la cadena en minusculas. 

String texto = "Java ES UN lenguaje DE PROGRAMACIÓN";
String textoMinusculas = texto.toLowerCase();
System.out.println(textoMinusculas);

En consola se ve: 
java es un lenguaje de programación


-toUpperCase()
Retorna la cadena en mayusculas. 

String texto = "Java es un lenguaje de programación";
String textoMayusculas = texto.toUpperCase();
System.out.println(textoMayusculas);

En consola se lee: 
JAVA ES UN LENGUAJE DE PROGRAMACIÓN


____________________CLASE "MATH"___________________________________________________________

-abs(double a)
Devuelve el valor absoluto de un valor double de un numero.
double num = -2.5;
double resultado = Math.abs(num);
System.out.println(resultado); // Salida: 2.5

-abs(int a) 
Devuelve el valor absoluto de un valor entero introducido como parámetro.
int num = -5;
int resultado = Math.abs(num);
System.out.println(resultado); // Salida: 5

-abs(long a)
Devuelve el valor absoluto de un valor long introducido como parámetro.
long num = -1234567890L;
long resultado = Math.abs(num);
System.out.println(resultado); // Salida: 1234567890

-max(double a, double b)
Para obtener el valor maximo entre dos nros double o decimales. 
double num1 = 2.5;
double num2 = 1.8;
double resultado = Math.max(num1, num2);
System.out.println(resultado); // Salida: 2.5

-max(int a, int b) 
Devuelve el mayor de dos valores enteros.
int num1 = 10;
int num2 = 20;
int maxNum = Math.max(num1, num2);
System.out.println(maxNum); // Salida: 20

-max(long a, long b) 
Devuelve el mayor de dos valores long.
long num1 = 1234567890L;
long num2 = 9876543210L;
long resultado = Math.max(num1, num2);
System.out.println(resultado); // Salida: 9876543210


-min(double a, double b)
Devuelve el menor de dos valores double.
double num1 = 2.5;
double num2 = 1.8;
double resultado = Math.min(num1, num2);
System.out.println(resultado); // Salida: 1.8


-min(int a, int b) 
Devuelve el menor de dos valores enteros.

int num1 = 10;
int num2 = 20;
int minNum = Math.min(num1, num2);
System.out.println(minNum); // Salida: 10


-min(long a, long b) 
Devuelve el menor de dos valores long.
long num1 = 1234567890L;
long num2 = 9876543210L;
long resultado = Math.min(num1, num2);
System.out.println(resultado); // Salida: 1234567890


-pow(double a, double b)
Devuelve el valor del primer argumento elevado a la potencia del segundo argumento.

double base = 2.0;
double exponente = 3.0;
double resultado = Math.pow(base, exponente);
System.out.println(resultado); // Salida: 8.0
//Estamos haciendo 2 a la 3. 

-random() 
Devuelve un double con un signo positivo, mayor o igual que 0.0 y menor que 1.0.

double randNum = Math.random();
System.out.println(randNum); // Salida: un número aleatorio entre 0.0 y 1.0

-round(double a) 
Redondea un numero decimal al entero mas cercano.

double num1 = 2.5;
long resultado1 = Math.round(num1);
System.out.println(resultado1); // Salida: 3

double num3 = 2.3;
long resultado3 = Math.round(num3);
System.out.println(resultado3); // Salida: 2


-sqrt(double a) 
Devuelve la raíz cuadrada positiva correctamente redondeada de un double.

double num = 25;
double sqrtNum = Math.sqrt(num);
System.out.println(sqrtNum); // Salida: 5.0


-floor(double a) 
Devuelve el entero más cercano por debajo.

double num = 2.8;
double resultado = Math.floor(num);
System.out.println(resultado); // Salida: 2.0


